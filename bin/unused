#!/usr/bin/env node
/**
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

const fs = require('fs');
const path = require('path');
const optimist = require('optimist');
const unused = require('../');

const argv = optimist
    .usage('Usage: unused [--ignore-params <param 1,param 2,param n..>] <file 1> <file 2> <file n>')
    .string('ignore-params')
    .describe('ignore-params', 'comma separated list of unused function parameters to ignore')
    .argv;

if (argv.help || argv._.length === 0) {
    console.info(optimist.help())
    process.exit(1);
}

const ignoreParams = (argv['ignore-params'] || '').split(',');

let errors = 0;
argv._.forEach(function(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (stats.isDirectory()) {
                // If it's a directory, iterate over files within it
                fs.readdirSync(filePath).forEach(function(file) {
                    const fullPath = path.join(filePath, file);
                    processFile(fullPath);
                });
            } else if (stats.isFile()) {
                // If it's a file, process it directly
                processFile(filePath);
            } else {
                console.error(`${filePath} is neither a file nor a directory.`);
                errors++;
            }
        } else {
            console.error(`${filePath} does not exist.`);
            errors++;
        }
    } catch (e) {
        console.error(`Error processing ${filePath}:`, e);
        errors++;
    }
});

// Exit with -1 to indicate unused vars exist
if (errors > 0) {
    process.exit(-1);
}

function processFile(filePath) {
    const unusedVars = unused(fs.readFileSync(filePath, 'utf8'));
    const filteredVars = unusedVars.filter(variable => !(variable.param && ignoreParams.includes(variable.name))).sort(function(left, right) {
        return left.loc.line - right.loc.line;
    });

    // Only show the path if there are unused variables
    if (filteredVars.length > 0) {
        console.log(`\x1b[95m ${filePath} \x1b[0m`)
        filteredVars.forEach(variable => {
            if (variable.param && ignoreParams.indexOf(variable.name) >= 0) {
                return;
            }
            console.log(`\x1b[91m \t${variable.name}\x1b[0m - on \x1b[92m line ${variable.loc.line} \x1b[0m`);
        });
    } else {
        console.log(`\x1b[95m ${filePath} \x1b[0m`)
        console.log('\x1b[33m You\'re putting all of your variables to use in this file! \x1b[0m')
    }

    errors += filteredVars.length;
}
// vim: ft=javascript
